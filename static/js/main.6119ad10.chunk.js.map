{"version":3,"sources":["types/models/Maze/Structure/MazeElement.ts","types/models/Maze/Structure/Wall.ts","errors/UnidentifiedWallTypeError.ts","components/mazeElements/Wall/Wall.service.ts","constants/dnd.ts","components/mazeElements/MoveableMazeElement/MoveableMazeElement.service.ts","components/mazeElements/Wall/Wall.tsx","components/mazeElements/MazeElement/MazeElement.tsx","components/mazeElements/MoveableMazeElement/DroppableMazeElement.tsx","components/mazeElements/MoveableMazeElement/MoveableMazeElement.tsx","types/models/Maze/Structure/Cell.ts","components/FlexBox/FlexBox.tsx","components/DangerZone/DangerZone.tsx","components/Maze/WithDangerZoneIfNeeded.tsx","components/Maze/MazeWallsRow.tsx","errors/UnidentifiedCellTypeError.ts","components/mazeElements/Cell/Cell.tsx","components/mazeElements/Cell/Cell.service.ts","components/Maze/MazeWallsAndCellsRow.tsx","components/Maze/Maze.tsx","components/MazeElementsMenu/ElementsContainer.tsx","components/MazeElementsMenu/ElementWrapper.tsx","components/Tooltip/Tooltip.tsx","components/FormContainer/FormContainer.tsx","components/MazeElementsMenu/MazeElementsMenu.tsx","components/MazeEditor/MazeEditorContainer.tsx","components/mazeElements/MazeElementDragLayer/MazeElementDragLayer.service.ts","components/mazeElements/MazeElementDragLayer/MazeElementDragLayer.tsx","components/MazeEditor/MazeDropContextAndDragLayer.tsx","errors/UnidentifiedItemTypeError.ts","components/MazeEditor/MazeEditorDropContext/MazeEditorDropContext.tsx","components/MazeEditor/MazeEditorDropContext/MazeEditorDropContext.service.ts","components/MazeEditor/MazeEditor.service.ts","components/MazeEditor/menuMazeElementsTypes.ts","components/BlockedNumberFormInput/BlockedNumberFormControl.service.ts","components/BlockedNumberFormInput/BlockedNumberFormControl.tsx","components/MazeResizer/MazeResizer.tsx","components/FormContainersWrapper/FormContainersWrapper.tsx","components/OverflowContainer/OverflowContainer.tsx","components/SquareContainer/SquareContainer.tsx","components/MazeEditor/MazeEditor.tsx","components/App/App.tsx","reducers/index.ts","store/index.ts","util/serviceWorker.ts","index.tsx"],"names":["MazeElementType","WallBaseType","UnidentifiedWallTypeError","wallType","Error","WallType","validateMazeWallMoving","sourceType","targetType","OUTPUT","EXTERNAL","ItemType","buildElementDropOptions","droppableItemType","droppableElement","getMoveElement","accept","drop","draggedItem","sourceElement","mazeDragElement","type","elementType","location","moveElement","onDrop","collect","collectDragProps","monitor","isOver","getItem","WallPosition","MazeElement","forwardRef","ref","danger","className","useState","isFocus","setFocus","elementClassName","blurElement","eventTarget","blur","tabIndex","onFocus","setTimeout","onBlur","onClick","event","target","onKeyDown","getCode","keyboard","Escape","DroppableMazeElement","validators","element","dragItemType","elementMovingValidators","castedRef","validateMoving","map","validator","some","value","validateElementMoving","useDrop","undefined","dragHoverClassName","MoveableMazeElement","dragItemNoneTypes","useRef","useDrag","item","canDrag","includes","end","current","buildElementDragOptions","drag","CellBaseType","Wall","position","wall","moveWall","positionClassName","HORIZONTAL","getCssClassNameFromWallPosition","wallTypeClassName","STONE","RUBBER","TRANSLUCENT","NONE","getCssClassNameFromWallType","FlexBox","children","DangerZone","disabled","WithDangerZoneIfNeeded","elementNumber","lastElementNumber","isRestricted","MazeWallsRow","wallsRow","restrictedSize","_","x","length","width","CellType","UnidentifiedCellTypeError","cellType","Cell","cell","moveCell","cellTypeClassName","ARSENAL","HOSPITAL","TREASURE","FAKE_TREASURE","SPAWN","RIVER","RIVER_START","RIVER_END","TRAP","PIT_IN","PIT_OUT","getCssClassNameFromCellType","MazeWallsAndCellsRow","cellsRow","buildWall","VERTICAL","elements","range","push","Maze","wallsRows","cellsRows","buildWallsRow","rows","y","buildRow","component","height","withDangerZoneIfNeeded","flatten","ElementsContainer","ElementWrapper","Tooltip","text","OverlayTrigger","overlay","id","delay","show","hide","FormContainer","md","Col","MazeElementsMenu","cellTypes","wallTypes","key","MazeEditorContainer","Container","getItemStyles","currentOffset","transform","isDraggedFromMaze","validateOffsetDiff","offsetDiff","Object","values","Math","abs","MazeElementDragLayer","isOutsideMaze","useDragLayer","isDragging","getSourceClientOffset","getDifferenceFromInitialOffset","style","MazeDropContextAndDragLayer","UnidentifiedItemTypeError","itemType","MazeEditorDropContext","removeCell","removeWall","getRemoveElement","removeElement","toString","shallow","buildMazeEditorDropContextOptions","buildWalls","mazeSize","walls","preset","wallsRowsQuantity","offset","row","getSideWall","concat","getMazeBorderRow","buildWallsPreset","forEach","buildCells","cells","buildCellsPreset","simplifyMazeElementsData","mazeElementsRows","filter","simplifyWallsData","simplifyCellsData","getMazeMinSize","currentSize","wallsBorders","currentMazeSize","rightOutputs","bottomOutputs","floor","wallsWithoutRightAndBottomOutputs","isWallOutputAndLocatedOnBottomOrRight","borderWalls","mapLocationToSize","getWallsBorders","cellsBorders","getCellsBorders","wallSideBorders","rightBorders","bottomBorders","maxBy","b","fixWallsOnResizing","newSize","newLocation","fixWallsLocationsOnResizing","bindMoveOrAddMazeElement","elementsState","setElementsState","source","newRows","sourceElementType","targetElementLocation","cloneDeep","addMazeElement","loc1","loc2","swapMazeElements","bindRemoveMazeElement","removedElementType","getPlaceholderForRemovedElement","menuCellTypes","menuWallTypes","blockKeyboardExceptArrowsUpAndDown","ArrowUp","ArrowDown","preventDefault","BlockedNumberFormControl","rest","Form","Control","MazeResizer","minSize","size","setSize","onRestrictedSize","getInput","property","required","onChange","newValue","parseInt","Row","FormContainersWrapper","OverflowContainer","SquareContainer","offsetWidth","demoWalls","demoCells","defaultMazeSize","MazeEditor","mazeMinSize","setMazeMinSize","setMazeSize","setWallsRows","setCellsRows","setRestrictedSize","useEffect","DndProvider","backend","TouchBackend","options","enableMouseEvents","fixedWalls","newRestrictedSize","App","combineReducers","store","configureStore","reducer","rootReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6119ad10.chunk.js","sourcesContent":["import ElementLocation from './ElementLocation';\n\n/**\n * Default settings for maze elements like Cell or Wall\n */\n\nexport enum MazeElementType {\n  /* Does not exist in server model */\n  NONE = 'NONE',\n}\n\nexport default interface MazeElement {\n  location: ElementLocation;\n  type: string;\n}\n","import MazeElement, { MazeElementType } from './MazeElement';\n\nenum WallBaseType {\n  STONE = 'STONE',\n  RUBBER = 'RUBBER',\n  TRANSLUCENT = 'TRANSLUCENT',\n  OUTPUT = 'OUTPUT',\n\n  /* Does not exist in server model */\n  EXTERNAL = 'EXTERNAL',\n}\n\nexport const WallType = { ...WallBaseType, ...MazeElementType };\nexport type WallType = WallBaseType | MazeElementType;\n\nexport default interface Wall extends MazeElement {\n  type: WallType;\n}\n","export default class UnidentifiedWallTypeError extends Error {\n  constructor(wallType: string) {\n    super(`Wall type: ${wallType}`);\n  }\n}\n","import UnidentifiedWallTypeError from '../../../errors/UnidentifiedWallTypeError';\nimport { WallType } from '../../../types/models/Maze/Structure/Wall';\nimport MazeElementMovingValidator from '../../../types/util/validators/maze/MazeElementMovingValidator';\nimport { WallPosition } from './Wall';\n\nexport function getCssClassNameFromWallPosition(\n  position: WallPosition\n): string {\n  return `wall-${position === WallPosition.HORIZONTAL ? 'h' : 'v'}`;\n}\n\nexport function getCssClassNameFromWallType(type: WallType): string {\n  switch (type) {\n    case WallType.STONE:\n      return 'wall-stone';\n    case WallType.OUTPUT:\n      return 'wall-output';\n    case WallType.RUBBER:\n      return 'wall-rubber';\n    case WallType.TRANSLUCENT:\n      return 'wall-translucent';\n    case WallType.EXTERNAL:\n      return 'wall-external';\n    case WallType.NONE:\n      return 'wall-none';\n    default:\n      throw new UnidentifiedWallTypeError(type);\n  }\n}\n\nexport const validateMazeWallMoving: MazeElementMovingValidator = (\n  sourceType,\n  targetType\n) => {\n  if (sourceType === WallType.OUTPUT && targetType !== WallType.EXTERNAL) {\n    return false;\n  }\n  if (sourceType !== WallType.OUTPUT && targetType === WallType.EXTERNAL) {\n    return false;\n  }\n  if (targetType === WallType.OUTPUT) {\n    return false;\n  }\n\n  return true;\n};\n","// eslint-disable-next-line import/prefer-default-export\nexport const ItemType = {\n  MAZE_CELL: 'MAZE_CELL',\n  MAZE_WALL: 'MAZE_WALL',\n};\n","import { RefObject } from 'react';\nimport {\n  DropTargetMonitor,\n  DropTargetHookSpec,\n  DragSourceHookSpec,\n} from 'react-dnd';\nimport MazeElement from '../../../types/models/Maze/Structure/MazeElement';\nimport MazeDragElement from '../../../types/util/dnd/maze/MazeDragElement';\nimport MazeDropCollectedProps from '../../../types/util/dnd/maze/MazeDropCollectedProps';\nimport MoveMazeElement from '../../../types/util/dnd/maze/MoveMazeElement';\nimport MazeElementMovingValidator from '../../../types/util/validators/maze/MazeElementMovingValidator';\n\nexport function buildElementDropOptions(\n  droppableItemType: string,\n  droppableElement: MazeElement,\n  getMoveElement: (sourceType: string) => MoveMazeElement | undefined\n): DropTargetHookSpec<MazeDragElement, unknown, MazeDropCollectedProps> {\n  return {\n    accept: droppableItemType,\n    drop: (draggedItem) =>\n      onDrop(draggedItem, droppableElement, getMoveElement),\n    collect: collectDragProps,\n  };\n}\n\nfunction onDrop(\n  draggedItem: MazeDragElement,\n  droppableElement: MazeElement,\n  getMoveElement: (sourceType: string) => MoveMazeElement | undefined\n): void {\n  const sourceElement = mapItemToMazeElement(draggedItem);\n  const moveElement = getMoveElement(sourceElement.type);\n\n  moveElement?.(sourceElement, droppableElement);\n}\n\nfunction mapItemToMazeElement(mazeDragElement: MazeDragElement): MazeElement {\n  return {\n    type: mazeDragElement.elementType,\n    location: mazeDragElement.location,\n  };\n}\n\nfunction collectDragProps(monitor: DropTargetMonitor): MazeDropCollectedProps {\n  return {\n    isOver: monitor.isOver(),\n    draggedItem: monitor.getItem(),\n  };\n}\n\nexport function buildElementDragOptions(\n  { type, location }: MazeElement,\n  ref: RefObject<HTMLDivElement>,\n  dragItemType: string,\n  dragItemNoneTypes: string[],\n  className: string\n): DragSourceHookSpec<MazeDragElement, unknown, unknown> {\n  return {\n    item: {\n      type: dragItemType,\n      elementType: type,\n      location,\n      className,\n    },\n    canDrag: !dragItemNoneTypes.includes(type),\n    end: () => ref?.current?.blur(),\n  };\n}\n\nfunction validateElementMoving(\n  validators: MazeElementMovingValidator[],\n  sourceType: string,\n  targetType: string\n): boolean {\n  return validators\n    .map((validator) => validator(sourceType, targetType))\n    .some((value) => value);\n}\n\nexport function bindElementValidatorBySourceType(\n  validators: MazeElementMovingValidator[],\n  targetType: string\n): (sourceType: string) => boolean {\n  return (sourceType) =>\n    validateElementMoving(validators, sourceType, targetType);\n}\n","import React, { FunctionComponent } from 'react';\nimport './Wall.scss';\nimport {\n  getCssClassNameFromWallType,\n  getCssClassNameFromWallPosition,\n  validateMazeWallMoving,\n} from './Wall.service';\nimport IWall, { WallType } from '../../../types/models/Maze/Structure/Wall';\nimport { ItemType } from '../../../constants';\nimport MoveableMazeElement from '../MoveableMazeElement';\nimport MoveMazeElement from '../../../types/util/dnd/maze/MoveMazeElement';\n\nexport enum WallPosition {\n  HORIZONTAL,\n  VERTICAL,\n}\n\ninterface Props {\n  position: WallPosition;\n  wall: IWall;\n  moveWall?: MoveMazeElement;\n}\n\nconst Wall: FunctionComponent<Props> = ({ position, wall, moveWall }) => {\n  const positionClassName = getCssClassNameFromWallPosition(position);\n  const wallTypeClassName = getCssClassNameFromWallType(wall.type);\n\n  const className = `wall ${positionClassName} ${wallTypeClassName}`;\n\n  return (\n    <MoveableMazeElement\n      className={className}\n      element={wall}\n      dragItemType={ItemType.MAZE_WALL}\n      dragItemNoneTypes={[WallType.NONE, WallType.EXTERNAL]}\n      moveElement={moveWall}\n      elementMovingValidators={[validateMazeWallMoving]}\n    />\n  );\n};\n\nexport default Wall;\n","import keyboard, { getCode } from 'keyboard-key';\nimport React, { forwardRef, useState } from 'react';\nimport './MazeElement.scss';\n\ninterface Props {\n  danger?: boolean;\n  className?: string;\n}\n\nconst MazeElement = forwardRef<HTMLDivElement, Props>(\n  ({ danger, className }, ref) => {\n    const [isFocus, setFocus] = useState(false);\n\n    const dangerClassName = danger ? 'danger' : '';\n    const elementClassName = `maze-element ${dangerClassName} ${className}`;\n\n    const blurElement = (eventTarget: EventTarget) =>\n      (eventTarget as HTMLDivElement).blur();\n\n    return (\n      <div\n        ref={ref}\n        tabIndex={0}\n        className={elementClassName}\n        onFocus={() => setTimeout(() => setFocus(true), 200)}\n        onBlur={() => setFocus(false)}\n        onClick={(event) => isFocus && blurElement(event.target)}\n        onKeyDown={(event) =>\n          getCode(event) === keyboard.Escape && blurElement(event.target)\n        }\n      />\n    );\n  }\n);\n\nexport default MazeElement;\n","import React, { forwardRef, RefObject } from 'react';\nimport '../MazeElement/MazeElement.scss';\nimport { useDrop } from 'react-dnd';\nimport {\n  buildElementDropOptions,\n  bindElementValidatorBySourceType,\n} from './MoveableMazeElement.service';\nimport MazeElement from '../MazeElement';\nimport IMazeElement from '../../../types/models/Maze/Structure/MazeElement';\nimport MoveMazeElement from '../../../types/util/dnd/maze/MoveMazeElement';\nimport MazeDragElement from '../../../types/util/dnd/maze/MazeDragElement';\nimport MazeDropCollectedProps from '../../../types/util/dnd/maze/MazeDropCollectedProps';\nimport MazeElementMovingValidator from '../../../types/util/validators/maze/MazeElementMovingValidator';\n\ninterface Props {\n  element: IMazeElement;\n  dragItemType: string;\n  className?: string;\n  moveElement: MoveMazeElement;\n  elementMovingValidators?: MazeElementMovingValidator[];\n}\n\nconst DroppableMazeElement = forwardRef<HTMLDivElement, Props>(\n  (\n    { element, dragItemType, className, moveElement, elementMovingValidators },\n    ref\n  ) => {\n    const castedRef = ref as RefObject<HTMLDivElement>;\n\n    const validateMoving = elementMovingValidators\n      ? bindElementValidatorBySourceType(elementMovingValidators, element.type)\n      : () => true;\n\n    const getMoveElement = (sourceType: string) =>\n      validateMoving(sourceType) ? moveElement : undefined;\n\n    const [{ draggedItem, isOver }, drop] = useDrop<\n      MazeDragElement,\n      unknown,\n      MazeDropCollectedProps\n    >(buildElementDropOptions(dragItemType, element, getMoveElement));\n\n    drop(castedRef);\n\n    const dragHoverClassName =\n      isOver && draggedItem && validateMoving(draggedItem.elementType)\n        ? 'drag-hover'\n        : '';\n    const elementClassName = `${dragHoverClassName} ${className}`;\n\n    return <MazeElement ref={ref} className={elementClassName} />;\n  }\n);\n\nexport default DroppableMazeElement;\n","import React, { FunctionComponent, useRef } from 'react';\nimport '../MazeElement/MazeElement.scss';\nimport { useDrag } from 'react-dnd';\nimport IMazeElement from '../../../types/models/Maze/Structure/MazeElement';\nimport MazeDragElement from '../../../types/util/dnd/maze/MazeDragElement';\nimport { buildElementDragOptions } from './MoveableMazeElement.service';\nimport MazeElement from '../MazeElement';\nimport DroppableMazeElement from './DroppableMazeElement';\nimport MoveMazeElement from '../../../types/util/dnd/maze/MoveMazeElement';\nimport MazeElementMovingValidator from '../../../types/util/validators/maze/MazeElementMovingValidator';\n\ninterface Props {\n  element: IMazeElement;\n  dragItemType: string;\n  dragItemNoneTypes: string[];\n  className?: string;\n  moveElement?: MoveMazeElement;\n  elementMovingValidators?: MazeElementMovingValidator[];\n}\n\nconst MoveableMazeElement: FunctionComponent<Props> = ({\n  element,\n  dragItemType,\n  dragItemNoneTypes,\n  className,\n  moveElement,\n  elementMovingValidators,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [, drag] = useDrag<MazeDragElement, unknown, unknown>(\n    buildElementDragOptions(\n      element,\n      ref,\n      dragItemType,\n      dragItemNoneTypes,\n      className || ''\n    )\n  );\n\n  drag(ref);\n\n  return moveElement ? (\n    <DroppableMazeElement\n      ref={ref}\n      className={className}\n      element={element}\n      dragItemType={dragItemType}\n      moveElement={moveElement}\n      elementMovingValidators={elementMovingValidators}\n    />\n  ) : (\n    <MazeElement ref={ref} className={className} />\n  );\n};\n\nexport default MoveableMazeElement;\n","import ElementLocation from './ElementLocation';\nimport MazeElement, { MazeElementType } from './MazeElement';\n\nenum CellBaseType {\n  ARSENAL = 'ARSENAL',\n  HOSPITAL = 'HOSPITAL',\n  TREASURE = 'TREASURE',\n  FAKE_TREASURE = 'FAKE_TREASURE',\n  SPAWN = 'SPAWN',\n  RIVER = 'RIVER',\n  RIVER_START = 'RIVER_START',\n  RIVER_END = 'RIVER_END',\n  TRAP = 'TRAP',\n  PIT_IN = 'PIT_IN',\n  PIT_OUT = 'PIT_OUT',\n}\n\nexport const CellType = { ...CellBaseType, ...MazeElementType };\nexport type CellType = CellBaseType | MazeElementType;\n\nexport default interface Cell extends MazeElement {\n  type: CellType;\n  ref?: ElementLocation;\n}\n","import React, { FunctionComponent } from 'react';\n\ninterface Props {\n  className?: string;\n}\n\nconst FlexBox: FunctionComponent<Props> = ({ className, children }) => (\n  <div className={`d-flex ${className || ''}`}>{children}</div>\n);\n\nexport default FlexBox;\n","import React, { FunctionComponent } from 'react';\n\nimport './DangerZone.scss';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nconst DangerZone: FunctionComponent<Props> = ({ disabled, children }) => {\n  const colorClassName = disabled ? '' : 'danger-zone-enabled';\n  const className = `danger-zone ${colorClassName}`;\n\n  return <div className={className}>{children}</div>;\n};\n\nexport default DangerZone;\n","import React, { FunctionComponent } from 'react';\nimport DangerZone from '../DangerZone';\n\ninterface Props {\n  elementNumber: number;\n  lastElementNumber: number;\n  isRestricted: boolean;\n}\n\nconst WithDangerZoneIfNeeded: FunctionComponent<Props> = ({\n  elementNumber,\n  lastElementNumber,\n  isRestricted,\n  children,\n}) =>\n  elementNumber === lastElementNumber ? (\n    <DangerZone disabled={!isRestricted}>{children}</DangerZone>\n  ) : (\n    <>{children}</>\n  );\n\nexport default WithDangerZoneIfNeeded;\n","import React, { FunctionComponent } from 'react';\nimport Wall, { WallPosition } from '../mazeElements/Wall';\nimport MoveMazeElement from '../../types/util/dnd/maze/MoveMazeElement';\nimport IWall from '../../types/models/Maze/Structure/Wall';\nimport FlexBox from '../FlexBox';\nimport { PartialSize } from '../../types/models/Maze/Structure/Size';\nimport WithDangerZoneIfNeeded from './WithDangerZoneIfNeeded';\n\ninterface Props {\n  wallsRow: IWall[];\n  moveWall?: MoveMazeElement;\n  restrictedSize?: PartialSize;\n}\n\nconst MazeWallsRow: FunctionComponent<Props> = ({\n  wallsRow,\n  moveWall,\n  restrictedSize,\n}) => (\n  <FlexBox>\n    {wallsRow.map((_, x) => (\n      <WithDangerZoneIfNeeded\n        elementNumber={x}\n        lastElementNumber={wallsRow.length - 1}\n        isRestricted={!!restrictedSize?.width}\n      >\n        <Wall\n          position={WallPosition.HORIZONTAL}\n          wall={wallsRow[x]}\n          moveWall={moveWall}\n        />\n      </WithDangerZoneIfNeeded>\n    ))}\n  </FlexBox>\n);\n\nexport default MazeWallsRow;\n","export default class UnidentifiedCellTypeError extends Error {\n  constructor(cellType: string) {\n    super(`Cell type: ${cellType}`);\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport './Cell.scss';\nimport ICell, { CellType } from '../../../types/models/Maze/Structure/Cell';\nimport { ItemType } from '../../../constants';\nimport MoveableMazeElement from '../MoveableMazeElement';\nimport { getCssClassNameFromCellType } from './Cell.service';\nimport MoveMazeElement from '../../../types/util/dnd/maze/MoveMazeElement';\n\ninterface Props {\n  cell: ICell;\n  moveCell?: MoveMazeElement;\n}\n\nconst Cell: FunctionComponent<Props> = ({ cell, moveCell }) => {\n  const cellTypeClassName = getCssClassNameFromCellType(cell.type);\n\n  return (\n    <MoveableMazeElement\n      className={`cell ${cellTypeClassName}`}\n      element={cell}\n      dragItemType={ItemType.MAZE_CELL}\n      dragItemNoneTypes={[CellType.NONE]}\n      moveElement={moveCell}\n    />\n  );\n};\n\nexport default Cell;\n","import UnidentifiedCellTypeError from '../../../errors/UnidentifiedCellTypeError';\nimport { CellType } from '../../../types/models/Maze/Structure/Cell';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function getCssClassNameFromCellType(type: CellType): string {\n  switch (type) {\n    case CellType.ARSENAL:\n      return 'cell-arsenal';\n    case CellType.HOSPITAL:\n      return 'cell-hospital';\n    case CellType.TREASURE:\n      return 'cell-treasure';\n    case CellType.FAKE_TREASURE:\n      return 'cell-fake-treasure';\n    case CellType.SPAWN:\n      return 'cell-spawn';\n    case CellType.RIVER:\n      return 'cell-river';\n    case CellType.RIVER_START:\n      return 'cell-river-start';\n    case CellType.RIVER_END:\n      return 'cell-river-end';\n    case CellType.TRAP:\n      return 'cell-trap';\n    case CellType.PIT_IN:\n      return 'cell-pit-in';\n    case CellType.PIT_OUT:\n      return 'cell-pit-out';\n    case CellType.NONE:\n      return 'cell-none';\n    default:\n      throw new UnidentifiedCellTypeError(type);\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport { range } from 'lodash';\nimport IWall from '../../types/models/Maze/Structure/Wall';\nimport ICell from '../../types/models/Maze/Structure/Cell';\nimport Wall, { WallPosition } from '../mazeElements/Wall';\nimport Cell from '../mazeElements/Cell';\nimport MoveMazeElement from '../../types/util/dnd/maze/MoveMazeElement';\nimport FlexBox from '../FlexBox';\nimport { PartialSize } from '../../types/models/Maze/Structure/Size';\nimport WithDangerZoneIfNeeded from './WithDangerZoneIfNeeded';\n\ninterface Props {\n  wallsRow: IWall[];\n  cellsRow: ICell[];\n  moveCell?: MoveMazeElement;\n  moveWall?: MoveMazeElement;\n  restrictedSize?: PartialSize;\n}\n\nconst MazeWallsAndCellsRow: FunctionComponent<Props> = ({\n  wallsRow,\n  cellsRow,\n  moveCell,\n  moveWall,\n  restrictedSize,\n}) => {\n  const buildWall = (wall: IWall): JSX.Element => (\n    <Wall position={WallPosition.VERTICAL} wall={wall} moveWall={moveWall} />\n  );\n\n  const elements = range(cellsRow.length).map((x) => (\n    <WithDangerZoneIfNeeded\n      elementNumber={x}\n      lastElementNumber={cellsRow.length - 1}\n      isRestricted={!!restrictedSize?.width}\n    >\n      {buildWall(wallsRow[x])}\n      <Cell cell={cellsRow[x]} moveCell={moveCell} />\n    </WithDangerZoneIfNeeded>\n  ));\n  elements.push(buildWall(wallsRow[cellsRow.length]));\n\n  return <FlexBox>{elements}</FlexBox>;\n};\n\nexport default MazeWallsAndCellsRow;\n","import React, { FunctionComponent } from 'react';\nimport { flatten, range } from 'lodash';\nimport MazeWallsRow from './MazeWallsRow';\nimport MazeWallsAndCellsRow from './MazeWallsAndCellsRow';\nimport MoveMazeElement from '../../types/util/dnd/maze/MoveMazeElement';\nimport Cell from '../../types/models/Maze/Structure/Cell';\nimport Wall from '../../types/models/Maze/Structure/Wall';\nimport { PartialSize } from '../../types/models/Maze/Structure/Size';\nimport WithDangerZoneIfNeeded from './WithDangerZoneIfNeeded';\n\ninterface Props {\n  cellsRows: Cell[][];\n  wallsRows: Wall[][];\n  moveCell?: MoveMazeElement;\n  moveWall?: MoveMazeElement;\n  restrictedSize?: PartialSize;\n}\n\nconst Maze: FunctionComponent<Props> = ({\n  wallsRows,\n  cellsRows,\n  moveCell,\n  moveWall,\n  restrictedSize,\n}) => {\n  const buildWallsRow = (wallsRow: Wall[]) => (\n    <MazeWallsRow\n      wallsRow={wallsRow}\n      moveWall={moveWall}\n      restrictedSize={restrictedSize}\n    />\n  );\n\n  const buildRow = (y: number) => [\n    buildWallsRow(wallsRows[y * 2]),\n    <MazeWallsAndCellsRow\n      wallsRow={wallsRows[y * 2 + 1]}\n      cellsRow={cellsRows[y]}\n      moveCell={moveCell}\n      moveWall={moveWall}\n      restrictedSize={restrictedSize}\n    />,\n  ];\n\n  const withDangerZoneIfNeeded = (y: number, component: JSX.Element) => (\n    <WithDangerZoneIfNeeded\n      elementNumber={y}\n      lastElementNumber={cellsRows.length - 1}\n      isRestricted={!!restrictedSize?.height}\n    >\n      {component}\n    </WithDangerZoneIfNeeded>\n  );\n\n  const rows = range(cellsRows.length).map((y) =>\n    buildRow(y).map((component) => withDangerZoneIfNeeded(y, component))\n  );\n\n  return (\n    <div className=\"maze\">\n      {flatten(rows)}\n      {buildWallsRow(wallsRows[wallsRows.length - 1])}\n    </div>\n  );\n};\n\nexport default Maze;\n","import React, { FunctionComponent } from 'react';\n\nconst ElementsContainer: FunctionComponent = ({ children }) => (\n  <div className=\"d-flex flex-wrap justify-content-center\">{children}</div>\n);\n\nexport default ElementsContainer;\n","import React, { FunctionComponent } from 'react';\n\nconst ElementWrapper: FunctionComponent = ({ children }) => (\n  <div className=\"m-1\">{children}</div>\n);\n\nexport default ElementWrapper;\n","import * as React from 'react';\nimport { FunctionComponent } from 'react';\nimport { OverlayTrigger, Tooltip as BSTooltip } from 'react-bootstrap';\n\ninterface Props {\n  text: string;\n  children: JSX.Element;\n}\n\nconst Tooltip: FunctionComponent<Props> = ({ text, children }) => (\n  <OverlayTrigger\n    overlay={<BSTooltip id={`tooltip-${text}`}>{text}</BSTooltip>}\n    delay={{ show: 500, hide: 0 }}\n  >\n    <div>{children}</div>\n  </OverlayTrigger>\n);\n\nexport default Tooltip;\n","import React, { FunctionComponent } from 'react';\nimport { Col } from 'react-bootstrap';\n\ninterface Props {\n  md?: number;\n}\n\nconst FormContainer: FunctionComponent<Props> = ({ md, children }) => (\n  <Col md={md} className=\"p-3 border rounded bg-light\">\n    {children}\n  </Col>\n);\n\nexport default FormContainer;\n","import React, { FunctionComponent } from 'react';\nimport Cell from '../mazeElements/Cell';\nimport ElementsContainer from './ElementsContainer';\nimport ElementWrapper from './ElementWrapper';\nimport Wall, { WallPosition } from '../mazeElements/Wall';\nimport Tooltip from '../Tooltip';\nimport { CellType } from '../../types/models/Maze/Structure/Cell';\nimport { WallType } from '../../types/models/Maze/Structure/Wall';\nimport FormContainer from '../FormContainer';\n\ninterface Props {\n  cellTypes: CellType[];\n  wallTypes: WallType[];\n}\n\nconst MazeElementsMenu: FunctionComponent<Props> = ({\n  cellTypes,\n  wallTypes,\n}) => (\n  <FormContainer>\n    <h4>Cells</h4>\n    <ElementsContainer>\n      {cellTypes.map((type) => (\n        <ElementWrapper key={type}>\n          <Tooltip text={type}>\n            <Cell cell={{ type, location: { x: -1, y: -1 } }} />\n          </Tooltip>\n        </ElementWrapper>\n      ))}\n    </ElementsContainer>\n    <hr />\n    <h4>Walls</h4>\n    <ElementsContainer>\n      {wallTypes.map((type) => (\n        <ElementWrapper key={type}>\n          <Tooltip text={type}>\n            <Wall\n              wall={{ type, location: { x: -1, y: -1 } }}\n              position={WallPosition.HORIZONTAL}\n            />\n          </Tooltip>\n        </ElementWrapper>\n      ))}\n    </ElementsContainer>\n  </FormContainer>\n);\n\nexport default MazeElementsMenu;\n","import React, { FunctionComponent } from 'react';\nimport { Container } from 'react-bootstrap';\n\nconst MazeEditorContainer: FunctionComponent = ({ children }) => (\n  <Container>\n    <div className=\"d-flex justify-content-between my-3\">{children}</div>\n  </Container>\n);\n\nexport default MazeEditorContainer;\n","import { XYCoord } from 'react-dnd/lib/interfaces/monitors';\nimport MazeDragElement from '../../../types/util/dnd/maze/MazeDragElement';\n\nexport function getItemStyles(currentOffset: XYCoord): React.CSSProperties {\n  const { x, y } = currentOffset;\n  const transform = `translate(${x}px, ${y}px)`;\n\n  return {\n    transform,\n  };\n}\n\n/**\n * Item can be dragged from maze or from menu\n */\nexport function isDraggedFromMaze(item: MazeDragElement): boolean {\n  return item.location.x >= 0;\n}\n\n/**\n * Sometimes 'isDragging' is false when element start dragging, so some functions\n * work wrong. This function checks if dragging offset more than 1px on x or y.\n */\nexport function validateOffsetDiff(offsetDiff: XYCoord): boolean {\n  return Object.values(offsetDiff).some((value) => Math.abs(value) > 1);\n}\n","import React, { FunctionComponent } from 'react';\nimport { useDragLayer } from 'react-dnd';\nimport MazeDragLayerCollectedProps from '../../../types/util/dnd/maze/DragLayerCollectedProps';\nimport MazeElement from '../MazeElement';\nimport './MazeElementDragLayer.scss';\nimport {\n  getItemStyles,\n  isDraggedFromMaze,\n  validateOffsetDiff,\n} from './MazeElementDragLayer.service';\n\ninterface Props {\n  isOutsideMaze?: boolean;\n}\n\nconst MazeElementDragLayer: FunctionComponent<Props> = ({ isOutsideMaze }) => {\n  const { isDragging, item, currentOffset, offsetDiff } = useDragLayer<\n    MazeDragLayerCollectedProps\n  >((monitor) => ({\n    isDragging: monitor.isDragging(),\n    item: monitor.getItem(),\n    currentOffset: monitor.getSourceClientOffset(),\n    offsetDiff: monitor.getDifferenceFromInitialOffset(),\n  }));\n\n  if (!isDragging || !offsetDiff || !currentOffset) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"maze-element-drag-layer\"\n      style={getItemStyles(currentOffset)}\n    >\n      <MazeElement\n        danger={\n          isOutsideMaze &&\n          isDraggedFromMaze(item) &&\n          validateOffsetDiff(offsetDiff)\n        }\n        className={item.className}\n      />\n    </div>\n  );\n};\n\nexport default MazeElementDragLayer;\n","import React, { FunctionComponent } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { ItemType } from '../../constants';\nimport MazeDragElement from '../../types/util/dnd/maze/MazeDragElement';\nimport MazeDropCollectedProps from '../../types/util/dnd/maze/MazeDropCollectedProps';\nimport MazeElementDragLayer from '../mazeElements/MazeElementDragLayer';\n\nconst MazeDropContextAndDragLayer: FunctionComponent = ({ children }) => {\n  const [{ isOver }, drop] = useDrop<\n    MazeDragElement,\n    unknown,\n    MazeDropCollectedProps\n  >({\n    accept: [ItemType.MAZE_CELL, ItemType.MAZE_WALL],\n    collect: (monitor) => ({ isOver: monitor.isOver() }),\n  });\n\n  return (\n    <>\n      <MazeElementDragLayer isOutsideMaze={!isOver} />\n      <div className=\"w-100 h-100\" ref={drop}>\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default MazeDropContextAndDragLayer;\n","export default class UnidentifiedItemTypeError extends Error {\n  constructor(itemType: string) {\n    super(`Item type: ${itemType}`);\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { ItemType } from '../../../constants';\nimport UnidentifiedItemTypeError from '../../../errors/UnidentifiedItemTypeError';\nimport MazeDragElement from '../../../types/util/dnd/maze/MazeDragElement';\nimport RemoveMazeElement from '../../../types/util/dnd/maze/RemoveMazeElement';\nimport { buildMazeEditorDropContextOptions } from './MazeEditorDropContext.service';\n\nimport './MazeEditorDropContext.scss';\n\ninterface Props {\n  removeCell?: RemoveMazeElement;\n  removeWall?: RemoveMazeElement;\n}\n\nconst MazeEditorDropContext: FunctionComponent<Props> = ({\n  removeCell,\n  removeWall,\n  children,\n}) => {\n  const getRemoveElement = (\n    itemType: string\n  ): RemoveMazeElement | undefined => {\n    switch (itemType) {\n      case ItemType.MAZE_CELL:\n        return removeCell;\n      case ItemType.MAZE_WALL:\n        return removeWall;\n      default:\n        throw new UnidentifiedItemTypeError(itemType);\n    }\n  };\n\n  const [, drop] = useDrop<MazeDragElement, unknown, unknown>(\n    buildMazeEditorDropContextOptions(getRemoveElement)\n  );\n\n  return (\n    <div ref={drop} className=\"maze-editor-drop-context\">\n      {children}\n    </div>\n  );\n};\n\nexport default MazeEditorDropContext;\n","import { DropTargetHookSpec } from 'react-dnd';\nimport { ItemType } from '../../../constants';\nimport MazeDragElement from '../../../types/util/dnd/maze/MazeDragElement';\nimport MazeDropCollectedProps from '../../../types/util/dnd/maze/MazeDropCollectedProps';\nimport RemoveMazeElement from '../../../types/util/dnd/maze/RemoveMazeElement';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function buildMazeEditorDropContextOptions(\n  getRemoveElement: (itemType: string) => RemoveMazeElement | undefined\n): DropTargetHookSpec<MazeDragElement, unknown, MazeDropCollectedProps> {\n  return {\n    accept: [ItemType.MAZE_CELL, ItemType.MAZE_WALL],\n    drop: (item, monitor) => {\n      const removeElement = getRemoveElement(item.type.toString());\n      if (removeElement && monitor.isOver({ shallow: true })) {\n        removeElement({\n          type: item.elementType,\n          location: item.location,\n        });\n      }\n    },\n  };\n}\n","import { cloneDeep, concat, flatten, maxBy, range } from 'lodash';\nimport Cell, { CellType } from '../../types/models/Maze/Structure/Cell';\nimport ElementLocation from '../../types/models/Maze/Structure/ElementLocation';\nimport MazeElement, {\n  MazeElementType,\n} from '../../types/models/Maze/Structure/MazeElement';\nimport Size from '../../types/models/Maze/Structure/Size';\nimport Wall, { WallType } from '../../types/models/Maze/Structure/Wall';\nimport MoveMazeElement from '../../types/util/dnd/maze/MoveMazeElement';\nimport RemoveMazeElement from '../../types/util/dnd/maze/RemoveMazeElement';\n\n/**\n * Simplified maze elements data is a data stored in the database. It doesn't\n * containt NONE type of all elements and EXTERNAL type of wall.\n *\n * Built maze elements is always 2-dimensional array.\n */\n\n/**\n * Builds full walls rows from simplified walls data\n */\nexport function buildWalls(mazeSize: Size, walls: Wall[]): Wall[][] {\n  const preset = buildWallsPreset(mazeSize);\n\n  walls.forEach((wall) => {\n    const { x, y } = wall.location;\n    preset[y][x].type = wall.type;\n  });\n\n  return preset;\n}\n\n/**\n * Builds walls preset with only outside walls\n */\nfunction buildWallsPreset(mazeSize: Size): Wall[][] {\n  const wallsRowsQuantity = mazeSize.height * 2 + 1;\n\n  const walls: Wall[][] = range(1, wallsRowsQuantity - 1).map((y) => {\n    const offset = y % 2 === 0 ? 0 : 1;\n\n    const row = range(mazeSize.width - offset).map((x) => ({\n      location: { x: x + offset, y },\n      type: WallType.NONE,\n    }));\n\n    const getSideWall = (x: number): Wall => ({\n      location: { x, y },\n      type: WallType.EXTERNAL,\n    });\n\n    return offset\n      ? concat(getSideWall(0), row, getSideWall(mazeSize.width - 1 + offset))\n      : row;\n  });\n\n  const getMazeBorderRow = (y: number) =>\n    range(mazeSize.width).map((x) => ({\n      location: { x, y },\n      type: WallType.EXTERNAL,\n    }));\n\n  return [\n    getMazeBorderRow(0),\n    ...walls,\n    getMazeBorderRow(wallsRowsQuantity - 1),\n  ];\n}\n\n/**\n * Builds full cells rows from simplified cells data\n */\nexport function buildCells(mazeSize: Size, cells: Cell[]): Cell[][] {\n  const preset = buildCellsPreset(mazeSize);\n\n  cells.forEach((cell) => {\n    const { x, y } = cell.location;\n    preset[y][x].type = cell.type;\n  });\n\n  return preset;\n}\n\n/**\n * Builds preset with emty cells\n */\nfunction buildCellsPreset(mazeSize: Size): Cell[][] {\n  return range(mazeSize.height).map((y) =>\n    range(mazeSize.width).map((x) => ({\n      location: { x, y },\n      type: CellType.NONE,\n    }))\n  );\n}\n\nfunction simplifyMazeElementsData<T extends MazeElement>(\n  mazeElementsRows: T[][]\n): T[] {\n  return flatten(mazeElementsRows).filter(\n    (element) => element.type !== MazeElementType.NONE\n  );\n}\n\nexport function simplifyWallsData(wallsRows: Wall[][]): Wall[] {\n  return simplifyMazeElementsData(wallsRows).filter(\n    (wall) => wall.type !== WallType.EXTERNAL\n  );\n}\n\nexport function simplifyCellsData(cellsRows: Cell[][]): Cell[] {\n  return simplifyMazeElementsData(cellsRows);\n}\n\nexport function getMazeMinSize(\n  walls: Wall[],\n  cells: Cell[],\n  currentSize: Size\n): Size {\n  const wallsBorders: [Size[], Size[]] = getWallsBorders(walls, currentSize);\n  const cellsBorders: Size[] = getCellsBorders(cells);\n\n  const [rightBorders, bottomBorders] = wallsBorders.map((wallSideBorders) => [\n    ...cellsBorders,\n    ...wallSideBorders,\n  ]);\n\n  return {\n    width: maxBy(rightBorders, (b) => b.width)?.width || 1,\n    height: maxBy(bottomBorders, (b) => b.height)?.height || 1,\n  };\n}\n\n/**\n * @returns [rightBorder, bottomBorder]\n */\nfunction getWallsBorders(\n  walls: Wall[],\n  currentMazeSize: Size\n): [Size[], Size[]] {\n  const { height, width } = currentMazeSize;\n\n  const rightOutputs = walls.filter((wall) => wall.location.x === width);\n  const bottomOutputs = walls.filter(\n    (wall) => Math.floor(wall.location.y / 2) === height\n  );\n\n  const wallsWithoutRightAndBottomOutputs = walls.filter(\n    (wall) => !isWallOutputAndLocatedOnBottomOrRight(wall)\n  );\n\n  return <[Size[], Size[]]>[\n    [...wallsWithoutRightAndBottomOutputs, ...bottomOutputs],\n    [...wallsWithoutRightAndBottomOutputs, ...rightOutputs],\n  ].map((borderWalls) =>\n    borderWalls\n      .map((wall) => wall.location)\n      .map(({ x, y }) => ({ x, y: Math.floor(y / 2) }))\n      .map(mapLocationToSize)\n  );\n}\n\nfunction isWallOutputAndLocatedOnBottomOrRight(wall: Wall): boolean {\n  return (\n    wall.type === WallType.OUTPUT && !Object.values(wall.location).includes(0)\n  );\n}\n\nfunction getCellsBorders(cells: Cell[]): Size[] {\n  return cells.map((cell) => cell.location).map(mapLocationToSize);\n}\n\nfunction mapLocationToSize({ x, y }: ElementLocation): Size {\n  return { width: x + 1, height: y + 1 };\n}\n\nexport function fixWallsOnResizing(\n  walls: Wall[],\n  currentSize: Size,\n  newSize: Size\n): Wall[] {\n  return fixWallsLocationsOnResizing(walls, currentSize, newSize);\n}\n\n/**\n * Move outputs to borders\n */\nfunction fixWallsLocationsOnResizing(\n  walls: Wall[],\n  currentSize: Size,\n  newSize: Size\n): Wall[] {\n  return walls.map((wall) => {\n    if (!isWallOutputAndLocatedOnBottomOrRight(wall)) {\n      return wall;\n    }\n\n    const { x, y } = wall.location;\n    const newLocation: ElementLocation =\n      x === currentSize.width\n        ? { x: newSize.width, y }\n        : { x, y: newSize.height * 2 };\n\n    return {\n      ...wall,\n      location: newLocation,\n    };\n  });\n}\n\n/**\n * Swap elements if both of them inside maze. Copy element to maze if source\n * element outside maze.\n */\nexport function bindMoveOrAddMazeElement<T extends MazeElement>(\n  elementsState: T[][],\n  setElementsState: (newState: T[][]) => void\n): MoveMazeElement {\n  return (source, target) => {\n    const newRows =\n      source.location.x < 0\n        ? addMazeElement(elementsState, source.type, target.location)\n        : swapMazeElements(elementsState, source.location, target.location);\n    setElementsState(newRows);\n  };\n}\n\nfunction addMazeElement<T extends MazeElement>(\n  elements: T[][],\n  sourceElementType: string,\n  targetElementLocation: ElementLocation\n): T[][] {\n  const newRows = cloneDeep(elements);\n  const { x, y } = targetElementLocation;\n  newRows[y][x].type = sourceElementType;\n  return newRows;\n}\n\nfunction swapMazeElements<T extends MazeElement>(\n  elements: T[][],\n  loc1: ElementLocation,\n  loc2: ElementLocation\n): T[][] {\n  const newRows = cloneDeep(elements);\n  newRows[loc1.y][loc1.x].type = elements[loc2.y][loc2.x].type;\n  newRows[loc2.y][loc2.x].type = elements[loc1.y][loc1.x].type;\n  return newRows;\n}\n\nexport function bindRemoveMazeElement<T extends MazeElement>(\n  elementsState: T[][],\n  setElementsState: (newState: T[][]) => void\n): RemoveMazeElement {\n  return (element) => {\n    if (element.location.x < 0 || element.location.y < 0) {\n      return;\n    }\n\n    const newRows = cloneDeep(elementsState);\n    const newElement = newRows[element.location.y][element.location.x];\n    newElement.type = getPlaceholderForRemovedElement(element.type);\n    setElementsState(newRows);\n  };\n}\n\nfunction getPlaceholderForRemovedElement(removedElementType: string): string {\n  if (removedElementType === WallType.OUTPUT) {\n    return WallType.EXTERNAL;\n  }\n\n  return MazeElementType.NONE;\n}\n","import { CellType } from '../../types/models/Maze/Structure/Cell';\nimport { WallType } from '../../types/models/Maze/Structure/Wall';\n\nexport const menuCellTypes = [\n  CellType.SPAWN,\n  CellType.ARSENAL,\n  CellType.HOSPITAL,\n  CellType.TREASURE,\n  CellType.FAKE_TREASURE,\n  CellType.TRAP,\n  CellType.PIT_IN,\n  CellType.RIVER_START,\n];\n\nexport const menuWallTypes = [\n  WallType.OUTPUT,\n  WallType.STONE,\n  WallType.RUBBER,\n  WallType.TRANSLUCENT,\n];\n","import { getCode, ArrowUp, ArrowDown } from 'keyboard-key';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function blockKeyboardExceptArrowsUpAndDown(event: KeyboardEvent): void {\n  const keyCode = getCode(event);\n\n  switch (keyCode) {\n    case ArrowUp:\n    case ArrowDown:\n      return;\n    default:\n      event.preventDefault();\n  }\n}\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\nimport { Form, FormControlProps } from 'react-bootstrap';\nimport { blockKeyboardExceptArrowsUpAndDown } from './BlockedNumberFormControl.service';\n\nimport './BlockedNumberFormControl.scss';\n\ntype Props = InputHTMLAttributes<HTMLInputElement> & FormControlProps;\n\nconst BlockedNumberFormControl: FunctionComponent<Props> = ({\n  className,\n  ...rest\n}) => (\n  <Form.Control\n    {...rest}\n    className={`hidden-caret ${className}`}\n    type=\"number\"\n    onKeyDown={blockKeyboardExceptArrowsUpAndDown}\n  />\n);\n\nexport default BlockedNumberFormControl;\n","import React, { ChangeEvent, FunctionComponent } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport Size, { PartialSize } from '../../types/models/Maze/Structure/Size';\nimport BlockedNumberFormControl from '../BlockedNumberFormInput';\nimport FormContainer from '../FormContainer';\n\ninterface Props {\n  minSize: Size;\n  size: Size;\n  setSize(size: Size): void;\n  onRestrictedSize?(restrictedSize: PartialSize): void;\n}\n\nconst MazeResizer: FunctionComponent<Props> = ({\n  minSize,\n  size,\n  setSize,\n  onRestrictedSize,\n}) => {\n  const getInput: (property: keyof Size) => JSX.Element = (property) => (\n    <BlockedNumberFormControl\n      required\n      value={size[property]}\n      onChange={(event: ChangeEvent<HTMLInputElement>) => {\n        const newValue = parseInt(event.target.value, 10);\n\n        if (newValue < minSize[property]) {\n          onRestrictedSize?.({ [property]: newValue });\n        } else {\n          setSize({ ...size, [property]: newValue });\n        }\n      }}\n    />\n  );\n\n  return (\n    <FormContainer>\n      <h4>Size</h4>\n      <Row className=\"justify-content-center align-items-center\">\n        <Col md={4}>{getInput('width')}</Col>\n        <div className=\"font-weight-bolder\">✕</div>\n        <Col md={4}>{getInput('height')}</Col>\n      </Row>\n    </FormContainer>\n  );\n};\n\nexport default MazeResizer;\n","import React, { FunctionComponent } from 'react';\nimport { Col } from 'react-bootstrap';\n\nimport './FormContainersWrapper.scss';\n\ninterface Props {\n  md?: number;\n}\n\nconst FormContainersWrapper: FunctionComponent<Props> = ({ md, children }) => (\n  <Col md={md} className=\"form-containers-wrapper\">\n    {children}\n  </Col>\n);\n\nexport default FormContainersWrapper;\n","import React, { FunctionComponent } from 'react';\n\nconst OverflowContainer: FunctionComponent = ({ children }) => (\n  <div className=\"d-flex h-100 overflow-auto border rounded bg-light\">\n    <div className=\"d-inline-block m-auto p-3\">{children}</div>\n  </div>\n);\n\nexport default OverflowContainer;\n","import React, { FunctionComponent, useRef } from 'react';\n\ninterface Props {\n  className?: string;\n}\n\n/**\n * Makes height the same as width\n */\nconst SquareContainer: FunctionComponent<Props> = ({ children, className }) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  if (ref.current) {\n    ref.current.style.height = `${ref.current.offsetWidth}px`;\n  }\n\n  return (\n    <div ref={ref} className={className}>\n      {children}\n    </div>\n  );\n};\n\nexport default SquareContainer;\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { Col } from 'react-bootstrap';\nimport Maze from '../Maze';\nimport MazeElementsMenu from '../MazeElementsMenu';\nimport MazeEditorContainer from './MazeEditorContainer';\nimport MazeDropContextAndDragLayer from './MazeDropContextAndDragLayer';\nimport MazeEditorDropContext from './MazeEditorDropContext';\nimport Cell, { CellType } from '../../types/models/Maze/Structure/Cell';\nimport Wall, { WallType } from '../../types/models/Maze/Structure/Wall';\nimport {\n  buildWalls,\n  buildCells,\n  bindMoveOrAddMazeElement,\n  bindRemoveMazeElement,\n  getMazeMinSize,\n  simplifyWallsData,\n  simplifyCellsData,\n  fixWallsOnResizing,\n} from './MazeEditor.service';\nimport Size, { PartialSize } from '../../types/models/Maze/Structure/Size';\nimport { menuCellTypes, menuWallTypes } from './menuMazeElementsTypes';\nimport MazeResizer from '../MazeResizer';\nimport FormContainersWrapper from '../FormContainersWrapper';\nimport OverflowContainer from '../OverflowContainer';\nimport SquareContainer from '../SquareContainer';\n\nconst demoWalls: Wall[] = [\n  { location: { x: 3, y: 14 }, type: WallType.OUTPUT },\n  { location: { x: 3, y: 0 }, type: WallType.OUTPUT },\n  { location: { x: 0, y: 7 }, type: WallType.OUTPUT },\n  { location: { x: 7, y: 7 }, type: WallType.OUTPUT },\n  { location: { x: 3, y: 3 }, type: WallType.STONE },\n  { location: { x: 3, y: 4 }, type: WallType.RUBBER },\n  { location: { x: 3, y: 5 }, type: WallType.TRANSLUCENT },\n];\n\nconst demoCells: Cell[] = [\n  { location: { x: 0, y: 0 }, type: CellType.SPAWN },\n  { location: { x: 1, y: 0 }, type: CellType.TREASURE },\n  { location: { x: 2, y: 0 }, type: CellType.FAKE_TREASURE },\n  { location: { x: 3, y: 0 }, type: CellType.HOSPITAL },\n  { location: { x: 4, y: 0 }, type: CellType.ARSENAL },\n  { location: { x: 5, y: 0 }, type: CellType.RIVER_START },\n  { location: { x: 6, y: 0 }, type: CellType.RIVER },\n  { location: { x: 0, y: 1 }, type: CellType.RIVER_END },\n  { location: { x: 1, y: 1 }, type: CellType.TRAP },\n  { location: { x: 2, y: 1 }, type: CellType.PIT_IN },\n  { location: { x: 3, y: 1 }, type: CellType.PIT_OUT },\n];\n\nconst defaultMazeSize: Size = { height: 7, width: 7 };\n\nconst MazeEditor: FunctionComponent = () => {\n  const [mazeMinSize, setMazeMinSize] = useState<Size>(\n    getMazeMinSize(demoWalls, demoCells, defaultMazeSize)\n  );\n  const [mazeSize, setMazeSize] = useState<Size>(defaultMazeSize);\n  const [wallsRows, setWallsRows] = useState(\n    buildWalls(defaultMazeSize, demoWalls)\n  );\n  const [cellsRows, setCellsRows] = useState(\n    buildCells(defaultMazeSize, demoCells)\n  );\n  const [restrictedSize, setRestrictedSize] = useState<PartialSize>({});\n\n  useEffect(() => {\n    const minSize = getMazeMinSize(\n      simplifyWallsData(wallsRows),\n      simplifyCellsData(cellsRows),\n      mazeSize\n    );\n    setMazeMinSize(minSize);\n  }, [cellsRows, mazeSize, wallsRows]);\n\n  const setMazeSizeAndUpdateMaze = (newSize: Size) => {\n    const simplifiedWalls = simplifyWallsData(wallsRows);\n    const fixedWalls = fixWallsOnResizing(simplifiedWalls, mazeSize, newSize);\n\n    setWallsRows(buildWalls(newSize, fixedWalls));\n    setCellsRows(buildCells(newSize, simplifyCellsData(cellsRows)));\n\n    setMazeSize(newSize);\n  };\n\n  const onRestrictedSize = (newRestrictedSize: PartialSize) => {\n    setRestrictedSize(newRestrictedSize);\n    setTimeout(() => setRestrictedSize({}), 300);\n  };\n\n  const moveWall = bindMoveOrAddMazeElement(wallsRows, setWallsRows);\n  const moveCell = bindMoveOrAddMazeElement(cellsRows, setCellsRows);\n\n  const removeWall = bindRemoveMazeElement(wallsRows, setWallsRows);\n  const removeCell = bindRemoveMazeElement(cellsRows, setCellsRows);\n\n  return (\n    <DndProvider backend={TouchBackend} options={{ enableMouseEvents: true }}>\n      <MazeEditorDropContext removeWall={removeWall} removeCell={removeCell}>\n        <MazeEditorContainer>\n          <Col md={8}>\n            <MazeDropContextAndDragLayer>\n              <SquareContainer>\n                <OverflowContainer>\n                  <Maze\n                    wallsRows={wallsRows}\n                    cellsRows={cellsRows}\n                    moveWall={moveWall}\n                    moveCell={moveCell}\n                    restrictedSize={restrictedSize}\n                  />\n                </OverflowContainer>\n              </SquareContainer>\n            </MazeDropContextAndDragLayer>\n          </Col>\n          <FormContainersWrapper md={4}>\n            <MazeResizer\n              minSize={mazeMinSize}\n              size={mazeSize}\n              setSize={setMazeSizeAndUpdateMaze}\n              onRestrictedSize={onRestrictedSize}\n            />\n            <MazeElementsMenu\n              cellTypes={menuCellTypes}\n              wallTypes={menuWallTypes}\n            />\n          </FormContainersWrapper>\n        </MazeEditorContainer>\n      </MazeEditorDropContext>\n    </DndProvider>\n  );\n};\n\nexport default MazeEditor;\n","import React, { FunctionComponent } from 'react';\nimport MazeEditor from '../MazeEditor';\n\nconst App: FunctionComponent = () => {\n  return <MazeEditor />;\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nexport default combineReducers({});\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from '../reducers';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './store';\nimport * as serviceWorker from './util/serviceWorker';\n\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}